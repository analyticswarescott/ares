package com.aw.unity;

import java.util.UUID;

import javax.inject.Provider;

import com.aw.document.DocumentHandler;
import com.aw.platform.Platform;
import com.aw.unity.exceptions.QueryExecutionException;
import com.aw.unity.query.Filter;
import com.aw.unity.query.Query;

/**
 * An instance of unity for a particular tenant.
 *
 *
 *
 */
public interface UnityInstance { //the framework assumes we can instantiate from the concrete type


	/**
	 * properties used in the count field - should not be accessed outside of this class
	 */
	public static final Field COUNT_FIELD = new Field("*", FieldType.INT);

	/**
	 * The all field which contains all fields in string form
	 */
	public static final Field ALL_FIELD = new Field("_all", FieldType.STRING, false);

	/**
	 * Initialize the unity instance with the given data.
	 *
	 * @param data The data with which to initialize the unity instance
	 */
	public void initialize(Object data, DocumentHandler handler, Provider<Platform> platform);

	/**
	 * @return Available data sources
	 */
	public UnityDataSource[] getDataSources();

	/**
	 * Get a data source by name
	 *
	 * @param name
	 * @return
	 */
	public UnityDataSource getDataSource(String name);

	/**
	 * @return Metadata about this unity instance
	 */
	public UnityMetadata getMetadata();

	/**
	 * Run a query, returning a response in the requested format
	 *
	 * @param query
	 * @param format
	 * @return
	 */
	public UnityRunner execute(Query query) throws QueryExecutionException;

	/**
	 * Gets a runner
	 *
	 * @param guid The guid of the runner
	 * @return The runner, or null if not found
	 * @throws Exception If anything goes wrong
	 */
	public UnityRunner getRunner(UUID guid) throws Exception;

	/**
	 * Create data from the raw input data.
	 *
	 * @param rawData The raw data from which a new data instance will be built
	 * @return The data instance
	 * @throws Exception
	 */
	public Data newData(Object rawData) throws Exception;

	/**
	 * Create unity data of a known data type given the raw data
	 *
	 * @param rawData The raw data
	 * @param dataType The type of data the raw data represents
	 * @return The unity data instance
	 */
	public Data newData(Object rawData, DataType dataType) throws Exception;

	/**
	 * Convenience method to build a filter instance from the unity instance itself.
	 *
	 * @param rawData
	 * @param format
	 * @return
	 * @throws Exception
	 */
	public Filter newFilter(Object rawData) throws Exception;

	/**
	 * Convenience method to get the data type from the data type repository, or null if not found
	 *
	 * @param dataType The data type name
	 * @return The data type, or null if not found
	 */
	public DataType getDataType(String dataType);

	/**
	 * @return The default time field for this unity instance, if any. Time will be returned as null on any Data that can't describe when it occurred
	 */
	public String getDefaultTimeField();

	/**
	 * convert the given unity data (generated by this unity instance) to a pojo
	 *
	 * @param data the unity data instance
	 * @param type the pojo type
	 * @return the pojo
	 */
	public <T> T toPojo(Data data, Class<T> type) throws Exception;

}
